/// Generated by the Protocol Buffers 3.3.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.16
/// Source file "IMMessage.proto"
/// Syntax "Proto2"

import Foundation
import ProtocolBuffers


public struct ImmessageRoot {
    public static let `default` = ImmessageRoot()
    public var extensionRegistry:ExtensionRegistry

    init() {
        extensionRegistry = ExtensionRegistry()
        registerAllExtensions(registry: extensionRegistry)
    }
    public func registerAllExtensions(registry: ExtensionRegistry) {
    }
}

final public class UserInfo : GeneratedMessage {

    public static func == (lhs: UserInfo, rhs: UserInfo) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
        fieldCheck = fieldCheck && (lhs.hasLevel == rhs.hasLevel) && (!lhs.hasLevel || lhs.level == rhs.level)
        fieldCheck = fieldCheck && (lhs.hasIcon == rhs.hasIcon) && (!lhs.hasIcon || lhs.icon == rhs.icon)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    public fileprivate(set) var name:String! = nil
    public fileprivate(set) var hasName:Bool = false

    public fileprivate(set) var level:Int32! = nil
    public fileprivate(set) var hasLevel:Bool = false

    public fileprivate(set) var icon:String! = nil
    public fileprivate(set) var hasIcon:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        if !hasName {
            return false
        }
        if !hasLevel {
            return false
        }
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasName {
            try codedOutputStream.writeString(fieldNumber: 1, value:name)
        }
        if hasLevel {
            try codedOutputStream.writeInt32(fieldNumber: 2, value:level)
        }
        if hasIcon {
            try codedOutputStream.writeString(fieldNumber: 3, value:icon)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasName {
            serialize_size += name.computeStringSize(fieldNumber: 1)
        }
        if hasLevel {
            serialize_size += level.computeInt32Size(fieldNumber: 2)
        }
        if hasIcon {
            serialize_size += icon.computeStringSize(fieldNumber: 3)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> UserInfo.Builder {
        return UserInfo.classBuilder() as! UserInfo.Builder
    }
    public func getBuilder() -> UserInfo.Builder {
        return classBuilder() as! UserInfo.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return UserInfo.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return UserInfo.Builder()
    }
    public func toBuilder() throws -> UserInfo.Builder {
        return try UserInfo.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:UserInfo) throws -> UserInfo.Builder {
        return try UserInfo.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasName {
            jsonMap["name"] = name
        }
        if hasLevel {
            jsonMap["level"] = Int(level)
        }
        if hasIcon {
            jsonMap["icon"] = icon
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> UserInfo {
        return try UserInfo.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> UserInfo {
        return try UserInfo.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasName {
            output += "\(indent) name: \(name) \n"
        }
        if hasLevel {
            output += "\(indent) level: \(level) \n"
        }
        if hasIcon {
            output += "\(indent) icon: \(icon) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasName {
                hashCode = (hashCode &* 31) &+ name.hashValue
            }
            if hasLevel {
                hashCode = (hashCode &* 31) &+ level.hashValue
            }
            if hasIcon {
                hashCode = (hashCode &* 31) &+ icon.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "UserInfo"
    }
    override public func className() -> String {
        return "UserInfo"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:UserInfo = UserInfo()
        public func getMessage() -> UserInfo {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var name:String {
            get {
                return builderResult.name
            }
            set (value) {
                builderResult.hasName = true
                builderResult.name = value
            }
        }
        public var hasName:Bool {
            get {
                return builderResult.hasName
            }
        }
        @discardableResult
        public func setName(_ value:String) -> UserInfo.Builder {
            self.name = value
            return self
        }
        @discardableResult
        public func clearName() -> UserInfo.Builder{
            builderResult.hasName = false
            builderResult.name = nil
            return self
        }
        public var level:Int32 {
            get {
                return builderResult.level
            }
            set (value) {
                builderResult.hasLevel = true
                builderResult.level = value
            }
        }
        public var hasLevel:Bool {
            get {
                return builderResult.hasLevel
            }
        }
        @discardableResult
        public func setLevel(_ value:Int32) -> UserInfo.Builder {
            self.level = value
            return self
        }
        @discardableResult
        public func clearLevel() -> UserInfo.Builder{
            builderResult.hasLevel = false
            builderResult.level = nil
            return self
        }
        public var icon:String {
            get {
                return builderResult.icon
            }
            set (value) {
                builderResult.hasIcon = true
                builderResult.icon = value
            }
        }
        public var hasIcon:Bool {
            get {
                return builderResult.hasIcon
            }
        }
        @discardableResult
        public func setIcon(_ value:String) -> UserInfo.Builder {
            self.icon = value
            return self
        }
        @discardableResult
        public func clearIcon() -> UserInfo.Builder{
            builderResult.hasIcon = false
            builderResult.icon = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> UserInfo.Builder {
            builderResult = UserInfo()
            return self
        }
        override public func clone() throws -> UserInfo.Builder {
            return try UserInfo.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> UserInfo {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> UserInfo {
            let returnMe:UserInfo = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:UserInfo) throws -> UserInfo.Builder {
            if other == UserInfo() {
                return self
            }
            if other.hasName {
                name = other.name
            }
            if other.hasLevel {
                level = other.level
            }
            if other.hasIcon {
                icon = other.icon
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> UserInfo.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> UserInfo.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    name = try codedInputStream.readString()

                case 16:
                    level = try codedInputStream.readInt32()

                case 26:
                    icon = try codedInputStream.readString()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> UserInfo.Builder {
            let resultDecodedBuilder = UserInfo.Builder()
            if let jsonValueName = jsonMap["name"] as? String {
                resultDecodedBuilder.name = jsonValueName
            }
            if let jsonValueLevel = jsonMap["level"] as? Int {
                resultDecodedBuilder.level = Int32(jsonValueLevel)
            } else if let jsonValueLevel = jsonMap["level"] as? String {
                resultDecodedBuilder.level = Int32(jsonValueLevel)!
            }
            if let jsonValueIcon = jsonMap["icon"] as? String {
                resultDecodedBuilder.icon = jsonValueIcon
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> UserInfo.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try UserInfo.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class ChatMessage : GeneratedMessage {

    public static func == (lhs: ChatMessage, rhs: ChatMessage) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasUser == rhs.hasUser) && (!lhs.hasUser || lhs.user == rhs.user)
        fieldCheck = fieldCheck && (lhs.hasChatText == rhs.hasChatText) && (!lhs.hasChatText || lhs.chatText == rhs.chatText)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    public fileprivate(set) var user:UserInfo!
    public fileprivate(set) var hasUser:Bool = false
    public fileprivate(set) var chatText:String! = nil
    public fileprivate(set) var hasChatText:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        if !hasUser {
            return false
        }
        if !hasChatText {
            return false
        }
        if !user.isInitialized() {
            return false
        }
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasUser {
            try codedOutputStream.writeMessage(fieldNumber: 1, value:user)
        }
        if hasChatText {
            try codedOutputStream.writeString(fieldNumber: 2, value:chatText)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasUser {
            if let varSizeuser = user?.computeMessageSize(fieldNumber: 1) {
                serialize_size += varSizeuser
            }
        }
        if hasChatText {
            serialize_size += chatText.computeStringSize(fieldNumber: 2)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> ChatMessage.Builder {
        return ChatMessage.classBuilder() as! ChatMessage.Builder
    }
    public func getBuilder() -> ChatMessage.Builder {
        return classBuilder() as! ChatMessage.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return ChatMessage.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return ChatMessage.Builder()
    }
    public func toBuilder() throws -> ChatMessage.Builder {
        return try ChatMessage.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:ChatMessage) throws -> ChatMessage.Builder {
        return try ChatMessage.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasUser {
            jsonMap["user"] = try user.encode()
        }
        if hasChatText {
            jsonMap["chatText"] = chatText
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> ChatMessage {
        return try ChatMessage.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> ChatMessage {
        return try ChatMessage.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasUser {
            output += "\(indent) user {\n"
            if let outDescUser = user {
                output += try outDescUser.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasChatText {
            output += "\(indent) chatText: \(chatText) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasUser {
                if let hashValueuser = user?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueuser
                }
            }
            if hasChatText {
                hashCode = (hashCode &* 31) &+ chatText.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ChatMessage"
    }
    override public func className() -> String {
        return "ChatMessage"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:ChatMessage = ChatMessage()
        public func getMessage() -> ChatMessage {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var user:UserInfo! {
            get {
                if userBuilder_ != nil {
                    builderResult.user = userBuilder_.getMessage()
                }
                return builderResult.user
            }
            set (value) {
                builderResult.hasUser = true
                builderResult.user = value
            }
        }
        public var hasUser:Bool {
            get {
                return builderResult.hasUser
            }
        }
        fileprivate var userBuilder_:UserInfo.Builder! {
            didSet {
                builderResult.hasUser = true
            }
        }
        public func getUserBuilder() -> UserInfo.Builder {
            if userBuilder_ == nil {
                userBuilder_ = UserInfo.Builder()
                builderResult.user = userBuilder_.getMessage()
                if user != nil {
                    try! userBuilder_.mergeFrom(other: user)
                }
            }
            return userBuilder_
        }
        @discardableResult
        public func setUser(_ value:UserInfo!) -> ChatMessage.Builder {
            self.user = value
            return self
        }
        @discardableResult
        public func mergeUser(value:UserInfo) throws -> ChatMessage.Builder {
            if builderResult.hasUser {
                builderResult.user = try UserInfo.builderWithPrototype(prototype:builderResult.user).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.user = value
            }
            builderResult.hasUser = true
            return self
        }
        @discardableResult
        public func clearUser() -> ChatMessage.Builder {
            userBuilder_ = nil
            builderResult.hasUser = false
            builderResult.user = nil
            return self
        }
        public var chatText:String {
            get {
                return builderResult.chatText
            }
            set (value) {
                builderResult.hasChatText = true
                builderResult.chatText = value
            }
        }
        public var hasChatText:Bool {
            get {
                return builderResult.hasChatText
            }
        }
        @discardableResult
        public func setChatText(_ value:String) -> ChatMessage.Builder {
            self.chatText = value
            return self
        }
        @discardableResult
        public func clearChatText() -> ChatMessage.Builder{
            builderResult.hasChatText = false
            builderResult.chatText = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> ChatMessage.Builder {
            builderResult = ChatMessage()
            return self
        }
        override public func clone() throws -> ChatMessage.Builder {
            return try ChatMessage.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> ChatMessage {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> ChatMessage {
            let returnMe:ChatMessage = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:ChatMessage) throws -> ChatMessage.Builder {
            if other == ChatMessage() {
                return self
            }
            if (other.hasUser) {
                try mergeUser(value: other.user)
            }
            if other.hasChatText {
                chatText = other.chatText
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> ChatMessage.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ChatMessage.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder:UserInfo.Builder = UserInfo.Builder()
                    if hasUser {
                        try subBuilder.mergeFrom(other: user)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    user = subBuilder.buildPartial()

                case 18:
                    chatText = try codedInputStream.readString()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> ChatMessage.Builder {
            let resultDecodedBuilder = ChatMessage.Builder()
            if let jsonValueUser = jsonMap["user"] as? Dictionary<String,Any> {
                resultDecodedBuilder.user = try UserInfo.Builder.decodeToBuilder(jsonMap:jsonValueUser).build()

            }
            if let jsonValueChatText = jsonMap["chatText"] as? String {
                resultDecodedBuilder.chatText = jsonValueChatText
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> ChatMessage.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try ChatMessage.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class GiftMessage : GeneratedMessage {

    public static func == (lhs: GiftMessage, rhs: GiftMessage) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasUser == rhs.hasUser) && (!lhs.hasUser || lhs.user == rhs.user)
        fieldCheck = fieldCheck && (lhs.hasGiftName == rhs.hasGiftName) && (!lhs.hasGiftName || lhs.giftName == rhs.giftName)
        fieldCheck = fieldCheck && (lhs.hasGiftIcon == rhs.hasGiftIcon) && (!lhs.hasGiftIcon || lhs.giftIcon == rhs.giftIcon)
        fieldCheck = fieldCheck && (lhs.hasGiftCount == rhs.hasGiftCount) && (!lhs.hasGiftCount || lhs.giftCount == rhs.giftCount)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    public fileprivate(set) var user:UserInfo!
    public fileprivate(set) var hasUser:Bool = false
    public fileprivate(set) var giftName:String! = nil
    public fileprivate(set) var hasGiftName:Bool = false

    public fileprivate(set) var giftIcon:String! = nil
    public fileprivate(set) var hasGiftIcon:Bool = false

    public fileprivate(set) var giftCount:Int32! = nil
    public fileprivate(set) var hasGiftCount:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        if !hasUser {
            return false
        }
        if !hasGiftName {
            return false
        }
        if !hasGiftIcon {
            return false
        }
        if !hasGiftCount {
            return false
        }
        if !user.isInitialized() {
            return false
        }
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasUser {
            try codedOutputStream.writeMessage(fieldNumber: 1, value:user)
        }
        if hasGiftName {
            try codedOutputStream.writeString(fieldNumber: 2, value:giftName)
        }
        if hasGiftIcon {
            try codedOutputStream.writeString(fieldNumber: 3, value:giftIcon)
        }
        if hasGiftCount {
            try codedOutputStream.writeInt32(fieldNumber: 4, value:giftCount)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasUser {
            if let varSizeuser = user?.computeMessageSize(fieldNumber: 1) {
                serialize_size += varSizeuser
            }
        }
        if hasGiftName {
            serialize_size += giftName.computeStringSize(fieldNumber: 2)
        }
        if hasGiftIcon {
            serialize_size += giftIcon.computeStringSize(fieldNumber: 3)
        }
        if hasGiftCount {
            serialize_size += giftCount.computeInt32Size(fieldNumber: 4)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> GiftMessage.Builder {
        return GiftMessage.classBuilder() as! GiftMessage.Builder
    }
    public func getBuilder() -> GiftMessage.Builder {
        return classBuilder() as! GiftMessage.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return GiftMessage.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return GiftMessage.Builder()
    }
    public func toBuilder() throws -> GiftMessage.Builder {
        return try GiftMessage.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:GiftMessage) throws -> GiftMessage.Builder {
        return try GiftMessage.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasUser {
            jsonMap["user"] = try user.encode()
        }
        if hasGiftName {
            jsonMap["giftName"] = giftName
        }
        if hasGiftIcon {
            jsonMap["giftIcon"] = giftIcon
        }
        if hasGiftCount {
            jsonMap["giftCount"] = Int(giftCount)
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> GiftMessage {
        return try GiftMessage.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> GiftMessage {
        return try GiftMessage.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasUser {
            output += "\(indent) user {\n"
            if let outDescUser = user {
                output += try outDescUser.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasGiftName {
            output += "\(indent) giftName: \(giftName) \n"
        }
        if hasGiftIcon {
            output += "\(indent) giftIcon: \(giftIcon) \n"
        }
        if hasGiftCount {
            output += "\(indent) giftCount: \(giftCount) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasUser {
                if let hashValueuser = user?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueuser
                }
            }
            if hasGiftName {
                hashCode = (hashCode &* 31) &+ giftName.hashValue
            }
            if hasGiftIcon {
                hashCode = (hashCode &* 31) &+ giftIcon.hashValue
            }
            if hasGiftCount {
                hashCode = (hashCode &* 31) &+ giftCount.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "GiftMessage"
    }
    override public func className() -> String {
        return "GiftMessage"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:GiftMessage = GiftMessage()
        public func getMessage() -> GiftMessage {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var user:UserInfo! {
            get {
                if userBuilder_ != nil {
                    builderResult.user = userBuilder_.getMessage()
                }
                return builderResult.user
            }
            set (value) {
                builderResult.hasUser = true
                builderResult.user = value
            }
        }
        public var hasUser:Bool {
            get {
                return builderResult.hasUser
            }
        }
        fileprivate var userBuilder_:UserInfo.Builder! {
            didSet {
                builderResult.hasUser = true
            }
        }
        public func getUserBuilder() -> UserInfo.Builder {
            if userBuilder_ == nil {
                userBuilder_ = UserInfo.Builder()
                builderResult.user = userBuilder_.getMessage()
                if user != nil {
                    try! userBuilder_.mergeFrom(other: user)
                }
            }
            return userBuilder_
        }
        @discardableResult
        public func setUser(_ value:UserInfo!) -> GiftMessage.Builder {
            self.user = value
            return self
        }
        @discardableResult
        public func mergeUser(value:UserInfo) throws -> GiftMessage.Builder {
            if builderResult.hasUser {
                builderResult.user = try UserInfo.builderWithPrototype(prototype:builderResult.user).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.user = value
            }
            builderResult.hasUser = true
            return self
        }
        @discardableResult
        public func clearUser() -> GiftMessage.Builder {
            userBuilder_ = nil
            builderResult.hasUser = false
            builderResult.user = nil
            return self
        }
        public var giftName:String {
            get {
                return builderResult.giftName
            }
            set (value) {
                builderResult.hasGiftName = true
                builderResult.giftName = value
            }
        }
        public var hasGiftName:Bool {
            get {
                return builderResult.hasGiftName
            }
        }
        @discardableResult
        public func setGiftName(_ value:String) -> GiftMessage.Builder {
            self.giftName = value
            return self
        }
        @discardableResult
        public func clearGiftName() -> GiftMessage.Builder{
            builderResult.hasGiftName = false
            builderResult.giftName = nil
            return self
        }
        public var giftIcon:String {
            get {
                return builderResult.giftIcon
            }
            set (value) {
                builderResult.hasGiftIcon = true
                builderResult.giftIcon = value
            }
        }
        public var hasGiftIcon:Bool {
            get {
                return builderResult.hasGiftIcon
            }
        }
        @discardableResult
        public func setGiftIcon(_ value:String) -> GiftMessage.Builder {
            self.giftIcon = value
            return self
        }
        @discardableResult
        public func clearGiftIcon() -> GiftMessage.Builder{
            builderResult.hasGiftIcon = false
            builderResult.giftIcon = nil
            return self
        }
        public var giftCount:Int32 {
            get {
                return builderResult.giftCount
            }
            set (value) {
                builderResult.hasGiftCount = true
                builderResult.giftCount = value
            }
        }
        public var hasGiftCount:Bool {
            get {
                return builderResult.hasGiftCount
            }
        }
        @discardableResult
        public func setGiftCount(_ value:Int32) -> GiftMessage.Builder {
            self.giftCount = value
            return self
        }
        @discardableResult
        public func clearGiftCount() -> GiftMessage.Builder{
            builderResult.hasGiftCount = false
            builderResult.giftCount = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> GiftMessage.Builder {
            builderResult = GiftMessage()
            return self
        }
        override public func clone() throws -> GiftMessage.Builder {
            return try GiftMessage.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> GiftMessage {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> GiftMessage {
            let returnMe:GiftMessage = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:GiftMessage) throws -> GiftMessage.Builder {
            if other == GiftMessage() {
                return self
            }
            if (other.hasUser) {
                try mergeUser(value: other.user)
            }
            if other.hasGiftName {
                giftName = other.giftName
            }
            if other.hasGiftIcon {
                giftIcon = other.giftIcon
            }
            if other.hasGiftCount {
                giftCount = other.giftCount
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> GiftMessage.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> GiftMessage.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder:UserInfo.Builder = UserInfo.Builder()
                    if hasUser {
                        try subBuilder.mergeFrom(other: user)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    user = subBuilder.buildPartial()

                case 18:
                    giftName = try codedInputStream.readString()

                case 26:
                    giftIcon = try codedInputStream.readString()

                case 32:
                    giftCount = try codedInputStream.readInt32()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> GiftMessage.Builder {
            let resultDecodedBuilder = GiftMessage.Builder()
            if let jsonValueUser = jsonMap["user"] as? Dictionary<String,Any> {
                resultDecodedBuilder.user = try UserInfo.Builder.decodeToBuilder(jsonMap:jsonValueUser).build()

            }
            if let jsonValueGiftName = jsonMap["giftName"] as? String {
                resultDecodedBuilder.giftName = jsonValueGiftName
            }
            if let jsonValueGiftIcon = jsonMap["giftIcon"] as? String {
                resultDecodedBuilder.giftIcon = jsonValueGiftIcon
            }
            if let jsonValueGiftCount = jsonMap["giftCount"] as? Int {
                resultDecodedBuilder.giftCount = Int32(jsonValueGiftCount)
            } else if let jsonValueGiftCount = jsonMap["giftCount"] as? String {
                resultDecodedBuilder.giftCount = Int32(jsonValueGiftCount)!
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> GiftMessage.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try GiftMessage.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

extension UserInfo: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<UserInfo> {
        var mergedArray = Array<UserInfo>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> UserInfo? {
        return try UserInfo.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> UserInfo {
        return try UserInfo.Builder().mergeFrom(data: data, extensionRegistry:ImmessageRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> UserInfo {
        return try UserInfo.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> UserInfo {
        return try UserInfo.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> UserInfo {
        return try UserInfo.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> UserInfo {
        return try UserInfo.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> UserInfo {
        return try UserInfo.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "name": return self.name
        case "level": return self.level
        case "icon": return self.icon
        default: return nil
        }
    }
}
extension UserInfo.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "name": return self.name
            case "level": return self.level
            case "icon": return self.icon
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "name":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.name = newSubscriptValue
            case "level":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.level = newSubscriptValue
            case "icon":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.icon = newSubscriptValue
            default: return
            }
        }
    }
}
extension ChatMessage: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<ChatMessage> {
        var mergedArray = Array<ChatMessage>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> ChatMessage? {
        return try ChatMessage.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> ChatMessage {
        return try ChatMessage.Builder().mergeFrom(data: data, extensionRegistry:ImmessageRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> ChatMessage {
        return try ChatMessage.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> ChatMessage {
        return try ChatMessage.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> ChatMessage {
        return try ChatMessage.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> ChatMessage {
        return try ChatMessage.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ChatMessage {
        return try ChatMessage.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "user": return self.user
        case "chatText": return self.chatText
        default: return nil
        }
    }
}
extension ChatMessage.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "user": return self.user
            case "chatText": return self.chatText
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "user":
                guard let newSubscriptValue = newSubscriptValue as? UserInfo else {
                    return
                }
                self.user = newSubscriptValue
            case "chatText":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.chatText = newSubscriptValue
            default: return
            }
        }
    }
}
extension GiftMessage: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<GiftMessage> {
        var mergedArray = Array<GiftMessage>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> GiftMessage? {
        return try GiftMessage.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> GiftMessage {
        return try GiftMessage.Builder().mergeFrom(data: data, extensionRegistry:ImmessageRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> GiftMessage {
        return try GiftMessage.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> GiftMessage {
        return try GiftMessage.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> GiftMessage {
        return try GiftMessage.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> GiftMessage {
        return try GiftMessage.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> GiftMessage {
        return try GiftMessage.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "user": return self.user
        case "giftName": return self.giftName
        case "giftIcon": return self.giftIcon
        case "giftCount": return self.giftCount
        default: return nil
        }
    }
}
extension GiftMessage.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "user": return self.user
            case "giftName": return self.giftName
            case "giftIcon": return self.giftIcon
            case "giftCount": return self.giftCount
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "user":
                guard let newSubscriptValue = newSubscriptValue as? UserInfo else {
                    return
                }
                self.user = newSubscriptValue
            case "giftName":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.giftName = newSubscriptValue
            case "giftIcon":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.giftIcon = newSubscriptValue
            case "giftCount":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.giftCount = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
